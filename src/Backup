/* eslint-disable object-curly-newline */
/* eslint-disable no-alert */
/* eslint-disable no-shadow */
/* eslint-disable no-multi-spaces */
/* eslint-disable react/jsx-closing-tag-location */
/* eslint-disable react/jsx-wrap-multilines */
/* eslint-disable implicit-arrow-linebreak */
/* eslint-disable react/jsx-one-expression-per-line */

import React, { useState } from 'react';
import { addPost } from './function';
import { postUp, commentUp } from './thumb';
import Counter from './counter';
import profile from './profile.jpeg';

const initialPost = {
  temptId: '',
  temptContents: '',
  post: [
    {
      id: Counter(),
      writer: '홍길동',      // 작성자
      contents: '오늘은 날씨가 쌀쌀하니 좋아요 기능을 넣어보면 좋을 것 같다',    // 게시글의 내용
      thumbCount: 0,   // 좋아요 갯수
      sharingCount: 0, // 공유 횟수
      commentCount: 0, // 댓글 갯수
    },
  ],
};
// post의 배열 원소 하나하나를 렌더링하다가 N번째 게시글에서 이에 맞는 댓글 이 존재하면 같이 랜더링.
const initialComment = {
  id: Counter(),
  comment: [
    {
      writer: '',
      statement: '',
      commentThumbCount: 0,
    },
  ],
};

function App() {
  const [poststate, setPostState] = useState(initialPost);
  const [commentstate, setCommentState] = useState(initialComment);

  const { post, temptId, temptContents } = poststate;
  const { comment } = initialComment;

  const setPostTemptId = (temptId) => {
    setPostState({ ...poststate, temptId });
  };
  const setPostTemptContents = (temptContents) => {
    setPostState({ ...poststate, temptContents });
  };
  const handleAddPost = () => {
    if (temptId.trim() && temptContents.trim()) {
      setPostState({ ...addPost(poststate, temptId, temptContents), temptId: '', temptContents: '' });
    } else {
      alert('내용을 입력해주세요');
    }
  };

  const postThumbUp = (id) => {
    setPostState({ ...postUp(poststate, id) });
  };
  const commentThumbUp = (id) => {
    setPostState({ ...commentUp(poststate, id) });
  };

  return (
    <>
      <div className="addpost">
        <div className="addpost-title">게시물 만들기</div>
        <div>작성자: <input className="addpost-writer" type="text" value={temptId} onChange={(e) => setPostTemptId(e.target.value)} /></div>
        <div>내용: <input className="addpost-inputcontents" type="text" value={temptContents} onChange={(e) => setPostTemptContents(e.target.value)} /></div>
        <button className="addpost-out" type="button" onClick={handleAddPost}>게시</button>
      </div>
      <div>
        {post.map((p) =>
          <div key={p.writer} className="post">
            <div className="post-feed">{p.writer} 님이 게시글을 업로드했습니다.</div>
            <div className="post-main">
              <div className="post-writer"><img className="image" src={profile} alt="" width="7%" /> {p.writer}</div>
              <br />
              <div className="post-contents">{p.contents}</div>
              <span className="post-goodbar1">좋아요{p.thumbCount}개</span>
              <span className="post-goodbar2">댓글{p.commentCount}개</span>
              <span className="post-goodbar3">공유{p.sharingCount}개</span>
              <br />
              <button className="post-button-good" type="button" onClick={() => postThumbUp(p.writer)}>좋아요</button>
              <button className="post-button-good" type="button">댓글</button>
              <button className="post-button-good" type="button">공유하기</button>
            </div>
          </div>)}
      </div>
      <div className="comment">
        <div className="comment-write">
          <input type="text" /><button className="comment-input" type="button">입력</button>
        </div>
        <div>
          {comment.map((v) =>
            <div key={v.writer} className="comment-contents">
              <span className="comment-main"><img className="comment-image" src={profile} alt="" width="5%" /> {v.writer} : {v.statement}</span>
              <button type="button" className="comment-thumb" onClick={() => commentThumbUp(v.writer)}>좋아요</button>
              <span className="comment-thumb-count">{v.commentThumbCount}</span>
            </div>)}
        </div>
      </div>
    </>
  );
}

export default App;
